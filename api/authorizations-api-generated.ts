/* tslint:disable */
/* eslint-disable */
/*
Payments

Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.

The version of the OpenAPI document: 2.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Authorization2 } from '../models';
// @ts-ignore
import { AuthorizationsCapturePayment403Response } from '../models';
// @ts-ignore
import { AuthorizationsCapturePayment404Response } from '../models';
// @ts-ignore
import { AuthorizationsCapturePayment422Response } from '../models';
// @ts-ignore
import { AuthorizationsCapturePaymentResponse } from '../models';
// @ts-ignore
import { AuthorizationsReauthorizePayment403Response } from '../models';
// @ts-ignore
import { AuthorizationsReauthorizePayment404Response } from '../models';
// @ts-ignore
import { AuthorizationsReauthorizePayment422Response } from '../models';
// @ts-ignore
import { AuthorizationsReauthorizePaymentResponse } from '../models';
// @ts-ignore
import { AuthorizationsShowDetails404Response } from '../models';
// @ts-ignore
import { AuthorizationsShowDetailsResponse } from '../models';
// @ts-ignore
import { AuthorizationsVoidPayment403Response } from '../models';
// @ts-ignore
import { AuthorizationsVoidPayment404Response } from '../models';
// @ts-ignore
import { AuthorizationsVoidPayment409Response } from '../models';
// @ts-ignore
import { AuthorizationsVoidPayment422Response } from '../models';
// @ts-ignore
import { AuthorizationsVoidPaymentResponse } from '../models';
// @ts-ignore
import { Capture2 } from '../models';
// @ts-ignore
import { CaptureRequest } from '../models';
// @ts-ignore
import { Error400 } from '../models';
// @ts-ignore
import { Error401 } from '../models';
// @ts-ignore
import { ErrorDefault } from '../models';
// @ts-ignore
import { Money } from '../models';
// @ts-ignore
import { PaymentInstruction } from '../models';
// @ts-ignore
import { ReauthorizeRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthorizationsApi - axios parameter creator
 * @export
 */
export const AuthorizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Captures an authorized payment, by ID.
         * @summary Capture authorized payment
         * @param {string} authorizationId The PayPal-generated ID for the authorized payment to void.
         * @param {string} [payPalRequestId] The server stores keys for 45 days.
         * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
         * @param {CaptureRequest} [captureRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePayment: async (authorizationId: string, payPalRequestId?: string, prefer?: string, captureRequest?: CaptureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationId' is not null or undefined
            assertParamExists('capturePayment', 'authorizationId', authorizationId)
            const localVarPath = `/v2/payments/authorizations/{authorization_id}/capture`
                .replace(`{${"authorization_id"}}`, encodeURIComponent(String(authorizationId !== undefined ? authorizationId : `-authorization_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment/authcapture"], configuration)
            if (payPalRequestId != null) {
                localVarHeaderParameter['PayPal-Request-Id'] = String(payPalRequestId);
            }

            if (prefer != null) {
                localVarHeaderParameter['Prefer'] = String(prefer);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: captureRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payments/authorizations/{authorization_id}/capture',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(captureRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. Within the 29-day authorization period, you can issue multiple re-authorizations after the honor period expires.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment from 4 to 29 days after the 3-day honor period. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>
         * @summary Reauthorize authorized payment
         * @param {string} authorizationId The PayPal-generated ID for the authorized payment to void.
         * @param {string} [payPalRequestId] The server stores keys for 45 days.
         * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
         * @param {ReauthorizeRequest} [reauthorizeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reauthorizePayment: async (authorizationId: string, payPalRequestId?: string, prefer?: string, reauthorizeRequest?: ReauthorizeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationId' is not null or undefined
            assertParamExists('reauthorizePayment', 'authorizationId', authorizationId)
            const localVarPath = `/v2/payments/authorizations/{authorization_id}/reauthorize`
                .replace(`{${"authorization_id"}}`, encodeURIComponent(String(authorizationId !== undefined ? authorizationId : `-authorization_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment/authcapture"], configuration)
            if (payPalRequestId != null) {
                localVarHeaderParameter['PayPal-Request-Id'] = String(payPalRequestId);
            }

            if (prefer != null) {
                localVarHeaderParameter['Prefer'] = String(prefer);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: reauthorizeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payments/authorizations/{authorization_id}/reauthorize',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(reauthorizeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows details for an authorized payment, by ID.
         * @summary Show details for authorized payment
         * @param {string} authorizationId The PayPal-generated ID for the authorized payment to void.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails: async (authorizationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationId' is not null or undefined
            assertParamExists('showDetails', 'authorizationId', authorizationId)
            const localVarPath = `/v2/payments/authorizations/{authorization_id}`
                .replace(`{${"authorization_id"}}`, encodeURIComponent(String(authorizationId !== undefined ? authorizationId : `-authorization_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment/authcapture"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payments/authorizations/{authorization_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that has been fully captured.
         * @summary Void authorized payment
         * @param {string} authorizationId The PayPal-generated ID for the authorized payment to void.
         * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).&lt;blockquote&gt;&lt;strong&gt;Note:&lt;/strong&gt;For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.&lt;/blockquote&gt;
         * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidPayment: async (authorizationId: string, payPalAuthAssertion?: string, prefer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationId' is not null or undefined
            assertParamExists('voidPayment', 'authorizationId', authorizationId)
            const localVarPath = `/v2/payments/authorizations/{authorization_id}/void`
                .replace(`{${"authorization_id"}}`, encodeURIComponent(String(authorizationId !== undefined ? authorizationId : `-authorization_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment/authcapture"], configuration)
            if (payPalAuthAssertion != null) {
                localVarHeaderParameter['PayPal-Auth-Assertion'] = String(payPalAuthAssertion);
            }

            if (prefer != null) {
                localVarHeaderParameter['Prefer'] = String(prefer);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payments/authorizations/{authorization_id}/void',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationsApi - functional programming interface
 * @export
 */
export const AuthorizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Captures an authorized payment, by ID.
         * @summary Capture authorized payment
         * @param {AuthorizationsApiCapturePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async capturePayment(requestParameters: AuthorizationsApiCapturePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Capture2>> {
            const captureRequest: CaptureRequest = {
                amount: requestParameters.amount,
                invoice_id: requestParameters.invoice_id,
                final_capture: requestParameters.final_capture,
                note_to_payer: requestParameters.note_to_payer,
                soft_descriptor: requestParameters.soft_descriptor
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.capturePayment(requestParameters.authorizationId, requestParameters.payPalRequestId, requestParameters.prefer, captureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. Within the 29-day authorization period, you can issue multiple re-authorizations after the honor period expires.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment from 4 to 29 days after the 3-day honor period. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>
         * @summary Reauthorize authorized payment
         * @param {AuthorizationsApiReauthorizePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reauthorizePayment(requestParameters: AuthorizationsApiReauthorizePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authorization2>> {
            const reauthorizeRequest: ReauthorizeRequest = {
                amount: requestParameters.amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.reauthorizePayment(requestParameters.authorizationId, requestParameters.payPalRequestId, requestParameters.prefer, reauthorizeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows details for an authorized payment, by ID.
         * @summary Show details for authorized payment
         * @param {AuthorizationsApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDetails(requestParameters: AuthorizationsApiShowDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authorization2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDetails(requestParameters.authorizationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that has been fully captured.
         * @summary Void authorized payment
         * @param {AuthorizationsApiVoidPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async voidPayment(requestParameters: AuthorizationsApiVoidPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authorization2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.voidPayment(requestParameters.authorizationId, requestParameters.payPalAuthAssertion, requestParameters.prefer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorizationsApi - factory interface
 * @export
 */
export const AuthorizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationsApiFp(configuration)
    return {
        /**
         * Captures an authorized payment, by ID.
         * @summary Capture authorized payment
         * @param {AuthorizationsApiCapturePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePayment(requestParameters: AuthorizationsApiCapturePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<Capture2> {
            return localVarFp.capturePayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. Within the 29-day authorization period, you can issue multiple re-authorizations after the honor period expires.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment from 4 to 29 days after the 3-day honor period. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>
         * @summary Reauthorize authorized payment
         * @param {AuthorizationsApiReauthorizePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reauthorizePayment(requestParameters: AuthorizationsApiReauthorizePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<Authorization2> {
            return localVarFp.reauthorizePayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows details for an authorized payment, by ID.
         * @summary Show details for authorized payment
         * @param {AuthorizationsApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails(requestParameters: AuthorizationsApiShowDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Authorization2> {
            return localVarFp.showDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that has been fully captured.
         * @summary Void authorized payment
         * @param {AuthorizationsApiVoidPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        voidPayment(requestParameters: AuthorizationsApiVoidPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<Authorization2> {
            return localVarFp.voidPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for capturePayment operation in AuthorizationsApi.
 * @export
 * @interface AuthorizationsApiCapturePaymentRequest
 */
export type AuthorizationsApiCapturePaymentRequest = {
    
    /**
    * The PayPal-generated ID for the authorized payment to void.
    * @type {string}
    * @memberof AuthorizationsApiCapturePayment
    */
    readonly authorizationId: string
    
    /**
    * The server stores keys for 45 days.
    * @type {string}
    * @memberof AuthorizationsApiCapturePayment
    */
    readonly payPalRequestId?: string
    
    /**
    * The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    * @type {string}
    * @memberof AuthorizationsApiCapturePayment
    */
    readonly prefer?: string
    
} & CaptureRequest

/**
 * Request parameters for reauthorizePayment operation in AuthorizationsApi.
 * @export
 * @interface AuthorizationsApiReauthorizePaymentRequest
 */
export type AuthorizationsApiReauthorizePaymentRequest = {
    
    /**
    * The PayPal-generated ID for the authorized payment to void.
    * @type {string}
    * @memberof AuthorizationsApiReauthorizePayment
    */
    readonly authorizationId: string
    
    /**
    * The server stores keys for 45 days.
    * @type {string}
    * @memberof AuthorizationsApiReauthorizePayment
    */
    readonly payPalRequestId?: string
    
    /**
    * The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    * @type {string}
    * @memberof AuthorizationsApiReauthorizePayment
    */
    readonly prefer?: string
    
} & ReauthorizeRequest

/**
 * Request parameters for showDetails operation in AuthorizationsApi.
 * @export
 * @interface AuthorizationsApiShowDetailsRequest
 */
export type AuthorizationsApiShowDetailsRequest = {
    
    /**
    * The PayPal-generated ID for the authorized payment to void.
    * @type {string}
    * @memberof AuthorizationsApiShowDetails
    */
    readonly authorizationId: string
    
}

/**
 * Request parameters for voidPayment operation in AuthorizationsApi.
 * @export
 * @interface AuthorizationsApiVoidPaymentRequest
 */
export type AuthorizationsApiVoidPaymentRequest = {
    
    /**
    * The PayPal-generated ID for the authorized payment to void.
    * @type {string}
    * @memberof AuthorizationsApiVoidPayment
    */
    readonly authorizationId: string
    
    /**
    * An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote>
    * @type {string}
    * @memberof AuthorizationsApiVoidPayment
    */
    readonly payPalAuthAssertion?: string
    
    /**
    * The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    * @type {string}
    * @memberof AuthorizationsApiVoidPayment
    */
    readonly prefer?: string
    
}

/**
 * AuthorizationsApiGenerated - object-oriented interface
 * @export
 * @class AuthorizationsApiGenerated
 * @extends {BaseAPI}
 */
export class AuthorizationsApiGenerated extends BaseAPI {
    /**
     * Captures an authorized payment, by ID.
     * @summary Capture authorized payment
     * @param {AuthorizationsApiCapturePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationsApiGenerated
     */
    public capturePayment(requestParameters: AuthorizationsApiCapturePaymentRequest, options?: AxiosRequestConfig) {
        return AuthorizationsApiFp(this.configuration).capturePayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. Within the 29-day authorization period, you can issue multiple re-authorizations after the honor period expires.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment from 4 to 29 days after the 3-day honor period. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>
     * @summary Reauthorize authorized payment
     * @param {AuthorizationsApiReauthorizePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationsApiGenerated
     */
    public reauthorizePayment(requestParameters: AuthorizationsApiReauthorizePaymentRequest, options?: AxiosRequestConfig) {
        return AuthorizationsApiFp(this.configuration).reauthorizePayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows details for an authorized payment, by ID.
     * @summary Show details for authorized payment
     * @param {AuthorizationsApiShowDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationsApiGenerated
     */
    public showDetails(requestParameters: AuthorizationsApiShowDetailsRequest, options?: AxiosRequestConfig) {
        return AuthorizationsApiFp(this.configuration).showDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that has been fully captured.
     * @summary Void authorized payment
     * @param {AuthorizationsApiVoidPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationsApiGenerated
     */
    public voidPayment(requestParameters: AuthorizationsApiVoidPaymentRequest, options?: AxiosRequestConfig) {
        return AuthorizationsApiFp(this.configuration).voidPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
