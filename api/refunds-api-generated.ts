/* tslint:disable */
/* eslint-disable */
/*
Payments

Call the Payments API to authorize payments, capture authorized payments, refund payments that have already been captured, and show payment information. Use the Payments API in conjunction with the <a href=\"/docs/api/orders/v2/\">Orders API</a>. For more information, see the <a href=\"/docs/checkout/\">PayPal Checkout Overview</a>.

The version of the OpenAPI document: 2.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ErrorDefault } from '../models';
// @ts-ignore
import { Refund } from '../models';
// @ts-ignore
import { RefundsDetails403Response } from '../models';
// @ts-ignore
import { RefundsDetails404Response } from '../models';
// @ts-ignore
import { RefundsDetailsResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * RefundsApi - axios parameter creator
 * @export
 */
export const RefundsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Shows details for a refund, by ID.
         * @summary Show refund details
         * @param {string} refundId The PayPal-generated ID for the refund for which to show details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details: async (refundId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refundId' is not null or undefined
            assertParamExists('details', 'refundId', refundId)
            const localVarPath = `/v2/payments/refunds/{refund_id}`
                .replace(`{${"refund_id"}}`, encodeURIComponent(String(refundId !== undefined ? refundId : `-refund_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/refund"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/payments/refunds/{refund_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RefundsApi - functional programming interface
 * @export
 */
export const RefundsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RefundsApiAxiosParamCreator(configuration)
    return {
        /**
         * Shows details for a refund, by ID.
         * @summary Show refund details
         * @param {RefundsApiDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async details(requestParameters: RefundsApiDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Refund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.details(requestParameters.refundId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RefundsApi - factory interface
 * @export
 */
export const RefundsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RefundsApiFp(configuration)
    return {
        /**
         * Shows details for a refund, by ID.
         * @summary Show refund details
         * @param {RefundsApiDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details(requestParameters: RefundsApiDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Refund> {
            return localVarFp.details(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for details operation in RefundsApi.
 * @export
 * @interface RefundsApiDetailsRequest
 */
export type RefundsApiDetailsRequest = {
    
    /**
    * The PayPal-generated ID for the refund for which to show details.
    * @type {string}
    * @memberof RefundsApiDetails
    */
    readonly refundId: string
    
}

/**
 * RefundsApiGenerated - object-oriented interface
 * @export
 * @class RefundsApiGenerated
 * @extends {BaseAPI}
 */
export class RefundsApiGenerated extends BaseAPI {
    /**
     * Shows details for a refund, by ID.
     * @summary Show refund details
     * @param {RefundsApiDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefundsApiGenerated
     */
    public details(requestParameters: RefundsApiDetailsRequest, options?: AxiosRequestConfig) {
        return RefundsApiFp(this.configuration).details(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
